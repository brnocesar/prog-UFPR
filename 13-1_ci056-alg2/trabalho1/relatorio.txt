Algoritmos e Estruturas de Dados 2 – Trabalho 1 – 2013/1

As palavras serão armazenadas em um vetor de estrutura que contém um ponteiro para uma string, um inteiro que armazena a frequência que a string ocorre no documento, e um ponteiro para um vetor de inteiros que guarda a linha de cada ocorrência da string.
A entrada é feita pela entrada padrão (stdin), o nome do documento a ser indexado é recebido como o segundo argumento que a função main() recebe. A main() chama a função leitura() e passa o nome do documento.
A função leitura() não retorna nenhum valor (void) e recebe apenas o nome do arquivo como argumento. Ela abre o arquivo em modo de leitura e escrita. Dentro desta função há um laço que para de fazer o loop apenas quando chega ao fim do arquivo. Enquanto não atinge a condição de parada, a cada iteração “pega” uma palavra do arquivo e passa para a função busca(). A função leitura() recolhe cada caractere convertendo-o para minusculo, verificando se é válido (para o programa) ou não, determina quando uma palavra começa e termina e como definir em que linha a palavra está.
A função busca() recebe uma string e retorna um valor inteiro que corresponde ao local (índice) que a string ocupa, ou deveria ocupar na estrutura. É uma função embalagem para a função recursiva de busca binária, bb(), que de fato é quem encontra o “local” da string na estrutura. Assim que bb() retorna o local para busca(), esta o retorna para a função que a chamou. Mais uma vez na função leitura(), o índice da posição na estrutura é passado a função inserir_palavra() que insere a palavra na estrutura.
A função inserir_palavra() não retorna valor algum, ela recebe a string e o índice do elemento em que deve ser inserida. A função avalia se a palavra que está nesta posição é igual a que vai ser inserida, se a resposta for sim, apenas incrementa o contador e marca a linha que a palavra está. Caso sejam diferentes, ela realoca espaço para mais um elemento da estrutura e coloca a palavra na ultima posição, penúltima na verdade. Então uma função para ordenação é chamada.
A função ordena() não retorna nada, ela recebe o índice de destino e o tamanho da estrutura. As sucessivas trocas entre os elementos da estrutura são realizadas por uma função chamada troca() que apenas troca os elementos de duas posições, uma particularidade desta função que talvez mereça destaque é o uso de uma “estrutura auxiliar” nas trocas. Voltando ao ordena(), o tipo de algoritmo de ordenação que melhor de encaixa ao nosso ordena() é o “Ordenação por Inserção”, pois a estrutura já está ordenada até o índice destino.
Note que, a última posição da estrutura é ocupada por um elemento pivô, que evita comparações com elementos que não existem na estrutura e sempre será diferente de qualquer string que venha a ser colocada na estrutura.
Quando a string é enfim ordenada, a função leitura() “pega” mais uma palavra do arquivo e faz mais um loop, até que condição de parada do laço é atingida, neste momento a main() (que é para onde leitura() retorna) chama a função escrita(), que não retorna e nem recebe nada.
A função escrita() escreve a estrutura no arquivo de saída no formato determinado na especificação.